@model mvc_task.Models.EditUserViewModel
<!-- Partial view content here -->



@using (Html.BeginForm("EditEmp", "Director", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Employee</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.EmpObj.EmployeeId)

        <div class="form-group">
            @Html.LabelFor(model => model.EmpObj.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EmpObj.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EmpObj.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EmpObj.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EmpObj.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EmpObj.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EmpObj.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EmpObj.LastName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EmpObj.LastName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EmpObj.DOB, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EmpObj.DOB, new { htmlAttributes = new { @class = "form-control", @type = "date" } })
                @Html.ValidationMessageFor(model => model.EmpObj.DOB, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EmpObj.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 form-control w-25">
                Female:
                @Html.RadioButtonFor(model => model.EmpObj.Gender, "F")
                Male:
                @Html.RadioButtonFor(model => model.EmpObj.Gender, "M")

                @Html.ValidationMessageFor(model => model.EmpObj.Gender, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DepartmentNames, "Department", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(x => x.EmpObj.DepartmentId, Model.DepartmentNames, new { @id = "ddlDepartment", @class = "form-control" })
                @Html.ValidationMessageFor(model => model.EmpObj.DepartmentId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Reporting Person")<br />

            @Html.DisplayFor(x => x.EmpObj.ReportingPerson)
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EmployeeNames, "Reporting Person", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @if (Model.EmpObj.DepartmentId == 3)
                {
                    @Html.DropDownListFor(x => x.EmpObj.ReportingPerson, new List<SelectListItem>(), new { @id = "ddlEmployeeName", @class = "form-control", @disabled = "true" })
                }
                else
                {
                    @Html.DropDownListFor(x => x.EmpObj.ReportingPerson, new List<SelectListItem>(), new { @id = "ddlEmployeeName", @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.EmpObj.ReportingPerson, "", new { @class = "text-danger" })
                }
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">

        $(document).ready(function () {
            $('#ddlDepartment').change(function () {
                $.ajax({
                    type: "post",
                    url: "/Director/GetReportingPer",
                    data: { departmentId: $('#ddlDepartment').val() },
                    datatype: "json",
                    traditional: true,
                    success: function (data) {
                        var Employee = $("#ddlEmployeeName");
                        Employee.empty();
                        console.log(data);
                        if (data == null || Object.keys(data).length === 0) {
                            Employee.append('<option value="" disabled selected>No Reporting Person</option>');
                            Employee.prop('disabled', true);
                        }
                        else {
                            $('#ddlEmployeeName').prop('disabled', false);
                            for (var i = 0; i < data.length; i++) {
                                Employee.append('<option value=' + data[i].Value + '>' + data[i].Text + '</option>');
                            }
                        }
                    }
                });
            });
        });
    </script>
}