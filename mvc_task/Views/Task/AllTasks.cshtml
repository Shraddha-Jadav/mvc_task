@model IEnumerable<mvc_task.Models.Task>

@{
    ViewBag.Title = "Deshboard";
    Layout = "~/Views/Shared/_Layout.cshtml";
    int id = (int)Session["EmpId"];
}
@if (TempData["AlertMessage"] != null)
{
    <div class="d-flex justify-content-end">
        <div id="alertMessage" class="alert alert-success w-25">
            @TempData["AlertMessage"]
        </div>
    </div>
    <script>
        function hideAlert() {
            $("#alertMessage").fadeOut("slow");
            @TempData.Remove("AlertMessage");
        }
        setTimeout(hideAlert, 1000);
    </script>

}

<div class="d-flex justify-content-end">
    <button type="button" data-id="0" class="btn btn-sm btn-success AddTask my-4">Add Task</button>
</div>


<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.TaskDate)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.TaskName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.TaskDescription)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Status)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.ApprovedOrRejectedOn)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.CreatedOn)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.ModifiedOn)
        </th>
        <th>Actions</th>
    </tr>

    @foreach (var item in Model)
    {
        if (item.EmployeeId == (int?)Session["EmpId"])
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.TaskDate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.TaskName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.TaskDescription)
                </td>
                <td>
                    @{
                        string textColor;
                        switch (item.Status)
                        {
                            case "Pending":
                                textColor = "#ff9966";
                                break;
                            case "Approved":
                                textColor = "green";
                                break;
                            default:
                                textColor = "red";
                                break;
                        }
                    }
                    <span style="color: @textColor;">
                        @Html.DisplayFor(modelItem => item.Status)
                    </span>
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ApprovedOrRejectedOn)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CreatedOn)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ModifiedOn)
                </td>
                <td>
                    @if (item.Status == "Pending")
                    {
                        <button type="button" data-id="@item.TaskID" class="btn btn-sm btn-warning px-3 AddTask">Edit</button>
                    }
                    @Html.ActionLink("Delete", "DeleteTask", new { id = item.TaskID }, new { @class = "btn btn-danger btn-sm" })
                </td>
            </tr>
        }
    }
</table>


<div class="modal" tabindex="-1" id="myModal" data-bs-backdrop="static">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">Task Log</h2>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">

            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}